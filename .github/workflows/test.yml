on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: {}

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        # method: [global, corepack, prefix, oldnpm]
        # check-latest: [true, false]
        # os: [ubuntu, macos, windows]
        # node-version: [12, 18, null]
        # old-npm-version: [10.2.4]

        method: [oldnpm]
        check-latest: [false]
        os: [ubuntu, macos, windows]
        node-version: [12, 18, null]
        old-npm-version: [10.2.4, 10.2.5, 10.3.0, 10.4.0, 10.5.0]
    runs-on: ${{ matrix.os }}-latest

    name: ${{ matrix.method }}, cl=${{ matrix.check-latest }}, ${{ matrix.os }}, node=${{ matrix.node-version }}

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - run: echo "ORIGINAL_PATH=$PATH" >> $GITHUB_ENV

      - run: |
          set -x
          env | grep -iE '(PATH|NPM|NODE)'
          which npm
          npm --version
          which node
          node --version
        name: Check environment

      - run: corepack enable npm
        if: matrix.method == 'corepack'
        name: corepack enable npm

      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: ${{ matrix.node-version }}
          check-latest: ${{ matrix.check-latest }}

      - run: |
          set -x
          env | grep -iE '(PATH|NPM|NODE)'
          which npm
          npm --version
          which node
          node --version
        name: Check environment

      - run: |
          export NPM_CONFIG_PREFIX=$HOME/.npm-global
          echo "NPM_CONFIG_PREFIX=$HOME/.npm-global" >> "$GITHUB_ENV"
          echo "$NPM_CONFIG_PREFIX/bin" >> $GITHUB_PATH
        if: matrix.method == 'prefix'
        name: Set npm prefix

      - run: npm install -g $(jq -r '.packageManager' < package.json)
        if: matrix.method == 'global' || matrix.method == 'prefix'
        name: Globally install npm

      - run: |
          export PATH=$ORIGINAL_PATH
          npx npm@${{ matrix.old-npm-version }} install -g $(jq -r '.packageManager' < package.json)
        if: matrix.method == 'oldnpm'
        name: Install npm with old npm ${{ matrix.old-npm-version }}

      - run: |
          set -x
          env | grep -iE '(PATH|NPM|NODE)'
          which npm
          npm --version
          which node
          node --version
        name: Check environment

      # Error if node version is not expected major
      - run: |
          set -x
          if [[ $(node --version) != v${{ matrix.node-version }}.* ]]; then
            echo "Expected node version v${{ matrix.node-version }}.* but got $(node --version)"
            exit 1
          fi
        name: Check if node version matches expected
        if: matrix.node-version

      # Error if npm version is not expected version from package.json
      - run: |
          EXPECTED=$(jq -r '.packageManagerVersionOnly' < package.json)
          ACTUAL=$(npm --version)
          if [[ $EXPECTED != $ACTUAL ]]; then
            echo "Expected npm version $EXPECTED but got $ACTUAL"
            exit 1
          fi
        name: Check if npm version matches expected
